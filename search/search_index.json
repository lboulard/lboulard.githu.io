{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Linux Windows Hyper-V","title":"Index"},{"location":"#index","text":"","title":"Index"},{"location":"#linux","text":"","title":"Linux"},{"location":"#windows","text":"Hyper-V","title":"Windows"},{"location":"Crocker%20rule/","text":"Declaring yourself to be operating by \"Crocker's Rules\" means that other people are allowed to optimize their messages for information, not for being nice to you. Crocker's Rules means that you have accepted full responsibility for the operation of your own mind - if you're offended, it's your fault. Anyone is allowed to call you a moron and claim to be doing you a favor. (Which, in point of fact, they would be. One of the big problems with this culture is that everyone's afraid to tell you you're wrong, or they think they have to dance around it.) Two people using Crocker's Rules should be able to communicate all relevant information in the minimum amount of time, without paraphrasing or social formatting. Obviously, don't declare yourself to be operating by Crocker's Rules unless you have that kind of mental discipline. Note that Crocker's Rules does not mean you can insult people; it means that other people don't have to worry about whether they are insulting you . Crocker's Rules are a discipline, not a privilege. Furthermore, taking advantage of Crocker's Rules does not imply reciprocity. How could it? Crocker's Rules are something you do for yourself, to maximize information received - not something you grit your teeth over and do as a favor. \"Crocker's Rules\" are named after Lee Daniel Crocker.","title":"Crocker rule"},{"location":"Enable%20UNMAP%20for%20an%20USB%20storage/","text":"From https://wiki.archlinux.org/index.php/Solid_state_drive#External_SSD_with_TRIM_support Quickly see discard capability with lsblk -D (DISK-GRAN shall not be zero). Install package \" sg3-utils \"\" for sg_readcap and sg_vpd command line tools. Install package \" util-linux \" for \" /sbin/blkdiscard -v /dev/sdX \" command line tools. ------ 8< ------ Several USB-to-SATA bridge chips (like VL715, VL716 etc.) and also USB-to-PCIe bridge chips (like the JMicron JMS583 http://www.jmicron.com/PDF/brief/jms583.pdf used in external NVMe enclosures like IB-1817M-C31 https://www.raidsonic.de/en/standards/searchresults.php?we_objectID=5666 ) support TRIM-like commands that can be sent through the USB Attached SCSI driver (named \"uas\" under Linux). But the kernel may not automatically detect this capability, and therefore might not use it. Assuming your block device in question is /dev/sdX, you can find out whether that is the case by using the command sg_readcap -l /dev/sdX If in its output you find a line stating \"Logical block provisioning: lbpme=0\" then you know that the kernel assumes the device does not support \"Logical Block Provisioning Management\" because the (LBPME) bit is not set. ( https://www.seagate.com/files/staticfiles/support/docs/manual/Interface%20manuals/100293068k.pdf#G4.1427908 ) If this is the case, then you should next find out whether the \"Vital Product Data\" (VPD) page on \"Logical Block Provisioning\" of your device tells of supported mechanisms for unmapping data. You can do this using the command: sg_vpd -a /dev/sdX Look for lines in the output that look like this: Unmap command supported (LBPU): 1 Write same (16) with unmap bit supported (LBPWS): 0 Write same (10) with unmap bit supported (LBPWS10): 0 This example would tell you the device supports the \"UNMAP\" command. Have a look at the output of cat /sys/block/sdX/device/scsi_disk/*/provisioning_mode If the kernel did not detect the capability of your device to unmap data, then this will likely return \"full\". Apart from \"full\", the kernel SCSI storage driver currently knows the following values for provisioning_mode: unmap writesame_16 writesame_10 writesame_zero disabled For the example above, you could now write \"unmap\" to \"provisioning_mode\" to ask the kernel to use that: echo \"unmap\" >/sys/block/sdX/device/scsi_disk/*/provisioning_mode ------ >8 ------ Make change persistent with: File /etc/udev/rules.d/50-usb-ssd-trim.rules : # ASMedia Technology Inc. \u2013 ASM1051E SATA 6Gb/s bridge, ASM1053E SATA 6Gb/s bridge, ASM1153 SATA 3Gb/s bridge, ASM1153E SATA 6Gb/s bridge ACTION==\"add|change\", ATTRS{idVendor}==\"174c\", ATTRS{idProduct}==\"55aa\", SUBSYSTEM==\"scsi_disk\", ATTR{provisioning_mode}=\"unmap\" # ASMedia Technology Inc. ASM236X series \u2013 NVMe enclosure ACTION==\"add|change\", ATTRS{idVendor}==\"174c\", ATTRS{idProduct}==\"2362\", SUBSYSTEM==\"scsi_disk\", ATTR{provisioning_mode}=\"unmap\" # Samsung Electronics Co., Ltd Portable SSD T5 ACTION==\"add|change\", ATTRS{idVendor}==\"04e8\", ATTRS{idProduct}==\"61f5\", SUBSYSTEM==\"scsi_disk\", ATTR{provisioning_mode}=\"unmap\" Apply new rules: sudo udevadm control --reload Unplug/replug device to change device provisioning mode.","title":"Enable UNMAP for an USB storage"},{"location":"Hyper-V/","text":"Hyper-VM Debian/Ubuntu New-VMSwitch -SwitchName \"vNat\" -SwitchType Internal Get-NetAdapter -Name \"vEthernet (vNat)\" | Format-List # We will use InterfaceIndex Get-NetAdapter -Name \"vEthernet (vNat)\" | Select-Object InterfaceIndex List IPv4/NetMask to avoid using a registered interface Get-WmiObject Win32_NetworkAdapterConfiguration | ` Where IPEnabled | ` Select IPSubnet, DNSServerSearchOrder, IpAddress Use a free 192.168.xxx.0 LAN prefix New-NetIPAddress -IPAddress 192.168.250.1 -PrefixLength 24 -InterfaceAlias \"vEthernet (vNat)\" New-NetNat -Name lbNat -InternalIPInterfaceAddressPrefix 192.168.250.0/24 Just for checking if a network IP is set Get-NetIPAddress -InterfaceAlias \"vEthernet (vNat)\" Get-NetNat Run \" virtmgmt.msc \" to start Hyper-V manager. Click \"Actions\"/\"Hyper-V parameters\". Change Virtual Disks place if default disk is too small. There is no DHCP, no DNS. Use static configuration inside guest VM. Fix issue that default interface is no longer correct: # List with `Get-NetIPInterface`, check InterfaceMetric is low for default/external route Get-NetIPInterface | Sort-Object InterfaceMetric Get-NetIPInterface | Where-Object AddressFamily -eq \"Ipv4\" | Sort-Object InterfaceMetric Set-NetIPInterface -InterfaceAlias \"Ethernet\" -AutomaticMetric enabled Set-NetIPInterface -InterfaceAlias \"vEthernet (vNat)\" -InterfaceMetric 5000","title":"Hyper V"},{"location":"Hyper-V/#hyper-vm-debianubuntu","text":"New-VMSwitch -SwitchName \"vNat\" -SwitchType Internal Get-NetAdapter -Name \"vEthernet (vNat)\" | Format-List # We will use InterfaceIndex Get-NetAdapter -Name \"vEthernet (vNat)\" | Select-Object InterfaceIndex List IPv4/NetMask to avoid using a registered interface Get-WmiObject Win32_NetworkAdapterConfiguration | ` Where IPEnabled | ` Select IPSubnet, DNSServerSearchOrder, IpAddress Use a free 192.168.xxx.0 LAN prefix New-NetIPAddress -IPAddress 192.168.250.1 -PrefixLength 24 -InterfaceAlias \"vEthernet (vNat)\" New-NetNat -Name lbNat -InternalIPInterfaceAddressPrefix 192.168.250.0/24 Just for checking if a network IP is set Get-NetIPAddress -InterfaceAlias \"vEthernet (vNat)\" Get-NetNat Run \" virtmgmt.msc \" to start Hyper-V manager. Click \"Actions\"/\"Hyper-V parameters\". Change Virtual Disks place if default disk is too small. There is no DHCP, no DNS. Use static configuration inside guest VM. Fix issue that default interface is no longer correct: # List with `Get-NetIPInterface`, check InterfaceMetric is low for default/external route Get-NetIPInterface | Sort-Object InterfaceMetric Get-NetIPInterface | Where-Object AddressFamily -eq \"Ipv4\" | Sort-Object InterfaceMetric Set-NetIPInterface -InterfaceAlias \"Ethernet\" -AutomaticMetric enabled Set-NetIPInterface -InterfaceAlias \"vEthernet (vNat)\" -InterfaceMetric 5000","title":"Hyper-VM Debian/Ubuntu"},{"location":"JetBrains/","text":"JetBrains Custom VM Options Timeout value is in milliseconds. Values here are 1 minutes for connection and 3 minutes for read timeout. -Dide.win.frame.decoration=false -Deditor.full.width.scrollbar=true -Didea.connection.timeout=60000 -Didea.read.timeout=180000 Reserve TCP ports 6905 - 7004 Ensure that netsh int ipv4 add excludedportrange protocol=tcp startport=6905 numberofports=100 References https://github.com/docker/for-win/issues/3171#issuecomment-459205576 https://blogs.msdn.microsoft.com/whereismysolution/2018/05/11/how-to-use-reserved-port-in-nettcpbinding-and-basichttpbinding-in-a-wcf-application/ Resolve \"Address already in use: bind\" netsh int ipv4 set dynamicport tcp start=49152 num=16383 netsh int ipv4 set dynamicport udp start=49152 num=16383 Or, more aggressively. net stop winnat net start winnat","title":"JetBrains"},{"location":"JetBrains/#jetbrains-custom-vm-options","text":"Timeout value is in milliseconds. Values here are 1 minutes for connection and 3 minutes for read timeout. -Dide.win.frame.decoration=false -Deditor.full.width.scrollbar=true -Didea.connection.timeout=60000 -Didea.read.timeout=180000","title":"JetBrains Custom VM Options"},{"location":"JetBrains/#reserve-tcp-ports-6905-7004","text":"Ensure that netsh int ipv4 add excludedportrange protocol=tcp startport=6905 numberofports=100 References https://github.com/docker/for-win/issues/3171#issuecomment-459205576 https://blogs.msdn.microsoft.com/whereismysolution/2018/05/11/how-to-use-reserved-port-in-nettcpbinding-and-basichttpbinding-in-a-wcf-application/","title":"Reserve TCP ports 6905 - 7004"},{"location":"JetBrains/#resolve-address-already-in-use-bind","text":"netsh int ipv4 set dynamicport tcp start=49152 num=16383 netsh int ipv4 set dynamicport udp start=49152 num=16383 Or, more aggressively. net stop winnat net start winnat","title":"Resolve \"Address already in use: bind\""},{"location":"PowerShell/","text":"Upgrade PowerShell PowerShell 5.1 is not maintenance only and documentation is no longer accessible. MSI installation Upgrade in Windows 10 from PowerShell 5.1. Installation shall provided latest version from PowerShell 7.2 branch. Run inside a PowerShell with administrative rights: Invoke-Expression \"& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI\" Reference: https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows With winget Or, using winget if installed. winget search powershell winget install powershell winget upgrade powershell Unrestricted local usage Set-ExecutionPolicy RemoteSigned -scope CurrentUser Profile files locations PowerShell 5.1 $psHome is $env:SystemRoot\\System32\\WindowsPowerShell\\v1.0 . Profile Path Scope $Home\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 Current user, Current Host $Home\\Documents\\WindowsPowerShell\\Profile.ps1 Current User, All Hosts $PsHome\\Microsoft.PowerShell_profile.ps1 All Users, Current Host $PsHome\\Profile.ps1 All Users, All Hosts PowerShell 7 $psHome is $env:ProgramFiles\\PowerShell\\7 . Profile Path Scope $Home\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1 Current user, Current Host $Home\\Documents\\PowerShell\\Profile.ps1 Current User, All Hosts $PsHome\\Microsoft.PowerShell_profile.ps1 All Users, Current Host $PsHome\\Profile.ps1 All Users, All Hosts Install posh-git Set-PSRepository -Name PSGallery -InstallationPolicy Trusted PowerShellGet\\Install-Module posh-git -Scope CurrentUser -Force Then later to update module: PowerShellGet\\Update-Module posh-git","title":"PowerShell"},{"location":"PowerShell/#upgrade-powershell","text":"PowerShell 5.1 is not maintenance only and documentation is no longer accessible.","title":"Upgrade PowerShell"},{"location":"PowerShell/#msi-installation","text":"Upgrade in Windows 10 from PowerShell 5.1. Installation shall provided latest version from PowerShell 7.2 branch. Run inside a PowerShell with administrative rights: Invoke-Expression \"& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI\" Reference: https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows","title":"MSI installation"},{"location":"PowerShell/#with-winget","text":"Or, using winget if installed. winget search powershell winget install powershell winget upgrade powershell","title":"With winget"},{"location":"PowerShell/#unrestricted-local-usage","text":"Set-ExecutionPolicy RemoteSigned -scope CurrentUser","title":"Unrestricted local usage"},{"location":"PowerShell/#profile-files-locations","text":"","title":"Profile files locations"},{"location":"PowerShell/#powershell-51","text":"$psHome is $env:SystemRoot\\System32\\WindowsPowerShell\\v1.0 . Profile Path Scope $Home\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 Current user, Current Host $Home\\Documents\\WindowsPowerShell\\Profile.ps1 Current User, All Hosts $PsHome\\Microsoft.PowerShell_profile.ps1 All Users, Current Host $PsHome\\Profile.ps1 All Users, All Hosts","title":"PowerShell 5.1"},{"location":"PowerShell/#powershell-7","text":"$psHome is $env:ProgramFiles\\PowerShell\\7 . Profile Path Scope $Home\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1 Current user, Current Host $Home\\Documents\\PowerShell\\Profile.ps1 Current User, All Hosts $PsHome\\Microsoft.PowerShell_profile.ps1 All Users, Current Host $PsHome\\Profile.ps1 All Users, All Hosts","title":"PowerShell 7"},{"location":"PowerShell/#install-posh-git","text":"Set-PSRepository -Name PSGallery -InstallationPolicy Trusted PowerShellGet\\Install-Module posh-git -Scope CurrentUser -Force Then later to update module: PowerShellGet\\Update-Module posh-git","title":"Install posh-git"},{"location":"WSL%202/","text":"Reduce virtual disk footprint Inside WSL2: sudo fstrim -v / exit In user CMD.EXE or PowerShell prompt: wsl --shutdown Find location of one of installations with those commands: Get-AppPackage -Name \"TheDebianProject.DebianGNULinux\" # Debian GNU/Linux Get-AppPackage -Name \"CanonicalGroupLimited.UbuntuonWindows\" # Ubuntu 20.04 Get-AppPackage -Name \"CanonicalGroupLimited.Ubuntu\" # Ubuntu Then, in a PowerShell prompt with administrator rights (for example Debian GNU/Linux installation): Optimize-VHD -Path .\\AppData\\Local\\Packages\\TheDebianProject.DebianGNULinux_76v4gfsz19hv4\\LocalState\\ext4.vhdx -Mode Full https://docs.microsoft.com/en-us/powershell/module/hyper-v/optimize-vhd","title":"WSL 2"},{"location":"WSL%202/#reduce-virtual-disk-footprint","text":"Inside WSL2: sudo fstrim -v / exit In user CMD.EXE or PowerShell prompt: wsl --shutdown Find location of one of installations with those commands: Get-AppPackage -Name \"TheDebianProject.DebianGNULinux\" # Debian GNU/Linux Get-AppPackage -Name \"CanonicalGroupLimited.UbuntuonWindows\" # Ubuntu 20.04 Get-AppPackage -Name \"CanonicalGroupLimited.Ubuntu\" # Ubuntu Then, in a PowerShell prompt with administrator rights (for example Debian GNU/Linux installation): Optimize-VHD -Path .\\AppData\\Local\\Packages\\TheDebianProject.DebianGNULinux_76v4gfsz19hv4\\LocalState\\ext4.vhdx -Mode Full https://docs.microsoft.com/en-us/powershell/module/hyper-v/optimize-vhd","title":"Reduce virtual disk footprint"},{"location":"wt/","text":"Install and configure Windows Terminal Project: https://github.com/microsoft/terminal/ Reference: https://docs.microsoft.com/en-us/powershell/module/appx/?view=win10-ps Requirement Universal runtime is required before installing Windows Terminal. Once runtime installed, you can discard installation package from disk. \u25b6Powershell -Command Invoke-WebRequest^ -Uri \"https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx\"^ -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx \u25b6Powershell -Command Add-AppxPackage -Path \"Microsoft.VCLibs.x64.14.00.Desktop.appx\" \u25b6DEL Microsoft.VCLibs.x64.14.00.Desktop.appx Download Download directly using PowerShell: \u25b6Powershell -Command Invoke-WebRequest^ -Uri \"https://github.com/microsoft/terminal/releases/download/v1.13.11431.0/Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle\"^ -OutFile Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle \u25b6PowerShell -Command \"(Get-FileHash Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle -Algo SHA256).Hash\" 97CE893C37A3063A7B45BC859BB357DF730992C87F614E45040D63F5CB2B80FE Install Windows Terminal Run inside a vanilla CMD.EXE or PowerShell instance. Install: \u25b6Powershell -Command Add-AppxPackage -Path \"Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle\" Remove Windows Terminal Remove: \u25b6Powershell -Command Remove-AppxPackage -Package \"Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe\" More information Information: \u25b6Powershell -Command Get-AppPackage -name \"Microsoft.WindowsTerminal\" File settings.json for Windows Terminal can be found in %LOCALAPPDATA%\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState . Custom icon can be used using URI like . Location is in %LOCALAPPDATA%\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\RoamingState .","title":"Install and configure Windows Terminal"},{"location":"wt/#install-and-configure-windows-terminal","text":"Project: https://github.com/microsoft/terminal/ Reference: https://docs.microsoft.com/en-us/powershell/module/appx/?view=win10-ps","title":"Install and configure Windows Terminal"},{"location":"wt/#requirement","text":"Universal runtime is required before installing Windows Terminal. Once runtime installed, you can discard installation package from disk. \u25b6Powershell -Command Invoke-WebRequest^ -Uri \"https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx\"^ -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx \u25b6Powershell -Command Add-AppxPackage -Path \"Microsoft.VCLibs.x64.14.00.Desktop.appx\" \u25b6DEL Microsoft.VCLibs.x64.14.00.Desktop.appx","title":"Requirement"},{"location":"wt/#download","text":"Download directly using PowerShell: \u25b6Powershell -Command Invoke-WebRequest^ -Uri \"https://github.com/microsoft/terminal/releases/download/v1.13.11431.0/Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle\"^ -OutFile Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle \u25b6PowerShell -Command \"(Get-FileHash Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle -Algo SHA256).Hash\" 97CE893C37A3063A7B45BC859BB357DF730992C87F614E45040D63F5CB2B80FE","title":"Download"},{"location":"wt/#install-windows-terminal","text":"Run inside a vanilla CMD.EXE or PowerShell instance. Install: \u25b6Powershell -Command Add-AppxPackage -Path \"Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe.msixbundle\"","title":"Install Windows Terminal"},{"location":"wt/#remove-windows-terminal","text":"Remove: \u25b6Powershell -Command Remove-AppxPackage -Package \"Microsoft.WindowsTerminal_Win10_1.13.11431.0_8wekyb3d8bbwe\"","title":"Remove Windows Terminal"},{"location":"wt/#more-information","text":"Information: \u25b6Powershell -Command Get-AppPackage -name \"Microsoft.WindowsTerminal\" File settings.json for Windows Terminal can be found in %LOCALAPPDATA%\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState . Custom icon can be used using URI like . Location is in %LOCALAPPDATA%\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\RoamingState .","title":"More information"}]}